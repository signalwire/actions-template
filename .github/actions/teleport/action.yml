name: Teleport
description: Proxy requests using Teleport

inputs:
  TELEPORT_VERSION:
    required: false
    default: 12.0.4
    description: The teleport binary client version
  JOIN_METHOD:
    required: false
    default: github
    description: Default join method for teleport
  K8S_CLUSTER_NAME:
    required: false
    description: 'kubernetes cluster name to connect'
  EXEC_COMMANDS:
    required: false
    description: 'whenever you would like to execute commands on remote'
  FILES:
    required: false
    description: 'Files to move to remote host'
  FILES_FOLDER:
    required: false
    description: 'Files target folder'
  TELEPORT_APP:
    required: false
    default: ''
    description: Teleport app to authenticate against
  
outputs:
  certificate-file:
    value: ${{ steps.auth-app.outputs.certificate-file }}
    description: Teleport app certificate file
  key-file:
    value: ${{ steps.auth-app.outputs.key-file }}
    description: Teleport app key file
  
runs:
  using: "composite"
  steps:
    - name: Fetch Teleport binaries
      uses: teleport-actions/setup@v1
      with:
        version: ${{ inputs.TELEPORT_VERSION }}

    - name: Fetch credentials using Machine ID
      id: auth
      uses: teleport-actions/auth@v1
      if: env.HOSTNAME != ''
      with:
        # Use the address of the auth/proxy server for your own cluster.
        proxy: ${{ env.PROXY_URL }}
        # Use the name of the join token resource you created in step 1.
        token: ${{ env.TOKEN }}
        # Specify the length of time that the generated credentials should be
        # valid for. This is optional and defaults to "1h"
        certificate-ttl: 1h

    # - name: Fetch credentials
    #   if: inputs.HOSTNAME != ''
    #   run: >
    #     tbot start
    #     --auth-server=${{ inputs.PROXY_URL }}
    #     --join-method=${{ inputs.JOIN_METHOD }}
    #     --token=${{ env.TOKEN }}
    #     --ca-pin=${{ env.CA_PIN }}
    #     --oneshot
    #     --destination-dir=./opt/machine-id
    #     --data-dir=./opt/machine-id-data
    #   shell: bash

    - name: Authorize against Teleport
      id: auth-k8s
      if: inputs.K8S_CLUSTER_NAME != ''
      uses: teleport-actions/auth-k8s@v1
      with:
        # Specify the publically accessible address of your Teleport proxy.
        proxy: ${{ env.PROXY_URL }}
        # Specify the name of the join token for your bot.
        token: ${{ env.TOKEN }}
        # Specify the length of time that the generated credentials should be
        # valid for. This is optional and defaults to "1h"
        certificate-ttl: 1h

        kubernetes-cluster: ${{ inputs.K8S_CLUSTER_NAME }}
    
    - name: Copy files to remote
      if: inputs.FILES != ''
      run: >
        tsh scp -i ${{ steps.auth.outputs.identity-file }} --login=${{env.USERNAME}} ${{ inputs.FILES }} ${{ env.HOSTNAME }}:${{ inputs.FILES_FOLDER }}
      shell: bash
    
    - name: Execute commands on remote
      if: inputs.EXEC_COMMANDS != ''
      run: >
        tsh -i ${{ steps.auth.outputs.identity-file }} --login=${{env.USERNAME}} ssh ${{ env.HOSTNAME }} '${{ inputs.EXEC_COMMANDS }}'
      shell: bash

    - name: Fetch application credentials
      id: auth-app
      if: inputs.TELEPORT_APP != ''
      uses: teleport-actions/auth-application@main
      with:
        # Specify the publically accessible address of your Teleport proxy.
        proxy: ${{ env.PROXY_URL }}
        # Specify the name of the join token for your bot.
        token: ${{ env.TOKEN }}
        # Specify the length of time that the generated credentials should be
        # valid for. This is optional and defaults to "1h"
        certificate-ttl: 1h
        # Specify the name of the application you wish to access.
        app: ${{ inputs.TELEPORT_APP }}