name: Ruby Unit Test
description: Ruby Unit Test report


inputs:
  RUBY_VERSION:
    required: false
    default: "3.0.6"
    description: "Default Ruby version"
  ENV_PATH: 
    description: 'The .env file for CI.'
    required: false
  RUBY_RAKE_COMMANDS:
    required: false
    description: A comma-separated list of rake commands.
  ZEITWERK:
    required: false
    description: Zeitwerk run.
  BRAKEMAN:
    required: false
    description: Brakeman run.
  RUBOCOP:
    required: false
    description: Rubocop run.
  REVIEWDOG:
    required: false
    description: Reviewdog report
    default: 'false'
  ADDITIONAL_SETUP:
    type: string
    default: '[]'
    description: 'JSON array of additional setup commands'

runs:
  using: "composite"
  steps:
    - name: Setup dependencies
      run: sudo apt update ; sudo apt install libpq-dev -y
      shell: bash

    - uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Setup Ruby and install gems
      uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
        ruby-version: ${{ inputs.RUBY_VERSION }}

    - uses: actions/setup-python@v5
      with:
        cache: 'pip'
    - run: pip -V
      shell: bash
    - run: pip install -r requirements.txt
      shell: bash

    # - name: Additional Setup
    #   if: inputs.ADDITIONAL_SETUP != '[]'
    #   shell: bash
    #   run: |
    #     additional_setup='${{ inputs.ADDITIONAL_SETUP }}'
    #     echo "$additional_setup" | jq -r '.[]' | while read -r command; do
    #       echo "Executing additional setup command: $command"
    #       eval "$command"
    #     done

    - uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: .env for CI
      if: inputs.ENV_PATH != null
      run: cp $ENV_PATH .env
      shell: bash
      env:
        ENV_PATH: ${{ inputs.ENV_PATH }}

    - name: Display env
      run: |
        if [[ -f .env ]]; then
          cat .env
        else
          echo ".env file does not exist"
        fi
      shell: bash

    - name: Run zeitwerk chek
      if: inputs.ZEITWERK == 'true'
      run: |
        bin/rails zeitwerk:check
      shell: bash

    - name: Generate Brakeman report
      if: inputs.BRAKEMAN == 'true'
      run: |
        bundle exec brakeman --skip-files bundle/ -q -w2 -f json > tmp/brakeman.json || exit 0
      shell: bash

#     - name: Publish report
#       if: inputs.BRAKEMAN == 'true'
#       uses: devmasx/brakeman-linter-action@v1.0.0
#       env:
#         GITHUB_TOKEN: ${{github.token}}
#         REPORT_PATH: tmp/brakeman.json

    - name: Install Reviewdog
      if: inputs.RUBOCOP == 'true'
      uses: reviewdog/action-setup@v1

    - name: Generate RuboCop report
      if: inputs.RUBOCOP == 'true'
      uses: d-lebed/rubocop-run-action@v0.11.0
      with:
        options: --format=RdjsonFormatter --out=reviewdog-report.json --format=progress
        rdjson_formatter: ${{ inputs.REVIEWDOG }}
        preserve_exitcode: false

    - name: Post Review
      if: inputs.REVIEWDOG == 'true' && inputs.RUBOCOP == 'true'
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
      run: |
        reviewdog \
          -reporter=github-pr-review \
          -filter-mode=added \
          -f=rdjson \
          < reviewdog-report.json
      shell: bash

    - name: Split the input variable RUBY_RAKE_COMMANDS into an array and execute
      if: inputs.RUBY_RAKE_COMMANDS != null
      env:
        arr: ${{ inputs.RUBY_RAKE_COMMANDS }}
      run: |
        IFS=',' read -ra arr <<< "$arr"
        for i in "${arr[@]}"; do
          if [[ $i == bundle* ]]; then
            $i
          fi
        done
      shell: bash

    - name: Run Tests
      run: |
        bundle exec rspec -f j -o tmp/rspec_results.json -f p spec/services/data_sphere/extractor_spec.rb
      shell: bash
    
    - name: RSpec Report
      if: always()
      uses: SonicGarden/rspec-report-action@v3
      with:
        token: ${{ env.GITHUB_TOKEN }}
        json-path: tmp/rspec_results.json
