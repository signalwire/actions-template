name: Build and pushing docker
description: Buld and push image to SignalWire registry

inputs:
  PROJECT_NAME:
    required: true
    description: 'Project naming matching registry repo'
  PUSH:
    required: false
    default: 'false'
    description: 'Whenever you want to push an image to regsitry'
  FILE:
    required: false
    default: ./Dockerfile
    description: 'Docker file location'
  CONTEXT:  
    required: false
    default: .
    description: 'Build context'
  PLATFORMS:
    required: false
    default: linux/amd64
    description: 'Target build platforms'
  TAG:
    required: false
    description: 'Image tag'
    default: |
      type=schedule
      type=ref,event=pr
      type=semver,pattern={{version}}
      type=semver,pattern={{major}}.{{minor}}
      type=semver,pattern={{major}}
      type=sha
  BUILD_ARGS:
    required: false
    default: ''
    description: 'Extra build args'
  REGISTRY:
    required: false
    default: 'registry.hub.docker.com'
    description: 'Registry URL'
  IMAGE_REPO:
    required: false
    default: 'signalwire'
    description: 'The default registry repo owner.'
  CONTAINER_TEST:
    default: 'true'
    description: 'Whenever the container should be tested on pr.'
  CONTAINER_TEST_COMMAND:
    default: ''
    description: 'A custom command to test the docker container.'
outputs:
  IMAGE_TAG:
    description: "Export image tag"
    value: ${{ steps.tag.outputs.IMAGE_TAG }}
    
runs:
  using: "composite"
  steps:
  
    - name: Configure buildx
      run: export DOCKER_CLI_EXPERIMENTAL=enabled && export DOCKER_TLS_CERTDIR="" && export DOCKER_HOST='docker'
      shell: bash

    - name: Configure buildx
      run: docker context create builders
      shell: bash
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
        endpoint: builders

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        # list of Docker images to use as base name for tags
        images: |
          signalwire/${{ inputs.PROJECT_NAME }}
        # generate Docker tags based on the following events/attributes
        tags: |
          ${{ inputs.TAG }}
    
    # - name: Login to ${{ inputs.REGISTRY }}
    #   uses: docker/login-action@v2
    #   if: contains(inputs.REGISTRY, 'pkg.dev' )
    #   with:
    #     registry: ${{ inputs.REGISTRY }}
    #     username: 'oauth2accesstoken'
    #     password: ${{ env.GCLOUD_ACCESS_TOKEN }}

    - name: Login to DockerHub
      uses: docker/login-action@v2
      # if: contains(inputs.REGISTRY, 'docker.com' )
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}

    - name: Build and export to Docker
      uses: docker/build-push-action@v3
      with:
        load: true
        tags: |
          ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        file: ${{ inputs.FILE }}
        context: ${{ inputs.CONTEXT }}
        platforms: ${{ inputs.PLATFORMS }}
        build-args: ${{ inputs.BUILD_ARGS }}

    - name: Test
      if: github.event_name == 'pull_request' && inputs.CONTAINER_TEST == 'true'
      id: test
      shell: bash
      run: |
        docker run -d --rm --name test ${{ fromJSON(steps.meta.outputs.json).tags[0] }} ${{ inputs.CONTAINER_TEST_COMMAND }}
        sleep 20
        docker logs test > logs.txt
        EXECUTIONLOG=$(cat logs.txt)
        EXECUTIONLOG="${EXECUTIONLOG//'%'/'%25'}"
        EXECUTIONLOG="${EXECUTIONLOG//$'\n'/'%0A'}"
        EXECUTIONLOG="${EXECUTIONLOG//$'\r'/'%0D'}"
        echo "name=container-logs::$EXECUTIONLOG" >> $GITHUB_OUTPUT
    
    - name: Build and push
      if: ${{ inputs.PUSH == 'true' && github.event_name != 'pull_request'}}
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: |
          ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        file: ${{ inputs.FILE }}
        context: ${{ inputs.CONTEXT }}
        platforms: ${{ inputs.PLATFORMS }}
        build-args: ${{ inputs.BUILD_ARGS }}

    # - name: Scanning image
    #   if: github.event_name == 'pull_request'
    #   run: docker sbom --output sbom.json ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
    #   shell: bash

    - name: Exporting image tag
      run: echo "IMAGE_TAG=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT
      id: tag
      shell: bash
