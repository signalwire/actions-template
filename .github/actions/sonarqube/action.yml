name: SonarQube code analysys
description: Run code coverage analysys

inputs:
  LANGUAGE:
    required: true
    
runs:
  using: "composite"
  steps:
    - name: Set up JDK 11
      if: ${{ inputs.LANGUAGE == 'dot-net'}}
      uses: actions/setup-java@v4
      with:
        java-version: 1.11

    - name: Cache SonarQube packages
      uses: actions/cache@v3
      if: inputs.LANGUAGE == 'dot-net'
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Install .NET requirements
      if: inputs.LANGUAGE == 'dot-net'
      run: dotnet tool install --global dotnet-coverage
      shell: bash

    - name: Install SonarQube scanner for .NET
      if: inputs.LANGUAGE == 'dot-net'
      shell: bash
      run: |
        mkdir -p ~/.sonar/scanner 
        dotnet tool update dotnet-sonarscanner --tool-path ~/.sonar/scanner
        dotnet tool update dotnet-coverage --tool-path ~/.sonar/coverage

    - name: Build and analyze .NET
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}  # Needed to get PR information, if any
      shell: bash
      if: inputs.LANGUAGE == 'dot-net'
      run: |
        ~/.sonar/scanner/dotnet-sonarscanner begin /k:"${{ env.SONAR_PROJECT_KEY }}" /d:sonar.login="${{ env.SONAR_TOKEN }}" /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
        dotnet build --no-incremental
        ~/.sonar/coverage/dotnet-coverage collect 'dotnet test -p:DefineConstants=TESTING' -f xml  -o 'coverage.xml'
        ~/.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      if: ${{ inputs.LANGUAGE != 'dot-net'}}
      env:
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        
    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      if: github.event_name == 'pull_request'
      # Force to fail step after specific time
      with:
        timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ env.SONAR_TOKEN }}

    - name: "Show SonarQube Quality Gate Status value"
      if: github.event_name == 'pull_request'
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
      shell: bash