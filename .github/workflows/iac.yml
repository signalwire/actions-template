name: 'Terragrunt GitHub Actions'
on:

  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      WORKING_DIR:
        required: true
        type: string
      tg_version: 
        required: false
        type: string
        default: '0.53.2'
      AWS_REGION: 
        required: true
        type: string
        default: "us-east-2"
      APPROVERS:
        required: false
        type: string
      GCP_ENV:
        required: false
        type: boolean
        default: true
      TELEPORT_PROXY_URL:
        required: false
        type: string
        default: ''
        description: Default Teleport URL
      TELEPORT_APP:
        required: false
        type: string
        default: ''
        description: An app registered on teleport to authenticate using proxy
    secrets:
      PRIVATE_SSH_KEY_TFMODULES:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_ACCESS_KEY_SECRET:
        required: true
      TF_VAR_DO_TOKEN:
        required: false
      GCP_SA:
        required: false
      GCP_WIP:
        required: false
      GH_APPROVAL_APP_ID:
        required: false
      GH_APPROVAL_APP_PKEY:
        required: false
      OS_TENANT_ID:
        required: false
      OS_TENANT_NAME:
        required: false
      OS_USERNAME:
        required: false
      OS_PASSWORD:
        required: false
      OVH_APPLICATION_KEY:
        required: false
      OVH_APPLICATION_SECRET:
        required: false
      OVH_CONSUMER_KEY:
        required: false
      OVH_CLOUD_PROJECT_SERVICE:
        required: false
      TELEPORT_TOKEN:
        required: false
        description: Teleport Token name
      VAULT_TOKEN:
        required: false
        description: A Vault token in case vault is required

jobs:
  terragrunt:
    name: 'Terragrunt ${{ inputs.WORKING_DIR}}'
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.ENVIRONMENT }}
    
    permissions: write-all

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Checkout actions
        uses: actions/checkout@v4
        with:
          repository: signalwire/actions-template
          ref: main
          path: actions

      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRIVATE_SSH_KEY_TFMODULES }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: ${{ inputs.AWS_REGION }}

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        if: inputs.GCP_ENV == true
        with:
          workload_identity_provider: ${{ secrets.GCP_WIP }}
          service_account: ${{ secrets.GCP_SA }}
      
      - name: Sops Binary Installer
        uses: mdgreenwald/mozilla-sops-action@v1.5.0
          
      - name: Authenticate against Teleport to use Vault
        if: inputs.TELEPORT_APP != ''
        id: teleportapp
        uses: ./actions/.github/actions/teleport
        env:
          TOKEN: ${{ secrets.TELEPORT_TOKEN }}
          PROXY_URL: ${{ inputs.TELEPORT_PROXY_URL }}
        with:
          TELEPORT_APP: ${{ inputs.TELEPORT_APP }}
      
      - name: Configure Vault
        if: inputs.TELEPORT_APP != ''
        run: |
          echo VAULT_ADDR=https://${{ inputs.TELEPORT_PROXY_URL }} >> $GITHUB_ENV
          echo VAULT_API_ADDR=https://${{ inputs.TELEPORT_PROXY_URL }} >> $GITHUB_ENV
          echo VAULT_CLIENT_TIMEOUT=120s >> $GITHUB_ENV
          echo VAULT_CLIENT_CERT=${{ steps.teleportapp.outputs.certificate-file }} >> $GITHUB_ENV
          echo VAULT_CLIENT_KEY=${{ steps.teleportapp.outputs.key-file }} >> $GITHUB_ENV
          echo VAULT_TOKEN=$VAULT_TOKEN >> $GITHUB_ENV
        env:
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}

      - uses: opentofu/setup-opentofu@v1

      - name: run terragrunt
        uses: autero1/action-terragrunt@v1.3.2
        with:
          terragrunt_version: ${{ inputs.tg_version }}

      - name: Terragrunt init
        id: init
        working-directory: ${{ inputs.WORKING_DIR }}
        run: terragrunt run-all init --terragrunt-non-interactive
      
      - name: Terragrunt validate
        id: validate
        run: terragrunt run-all validate --terragrunt-non-interactive
        working-directory: ${{ inputs.WORKING_DIR }}
        env:
          OVH_CLOUD_PROJECT_SERVICE: ${{ secrets.OVH_CLOUD_PROJECT_SERVICE }}

      - name: Terragrunt plan
        id: plan
        run: terragrunt run-all plan -no-color --terragrunt-non-interactive > plan.txt
        working-directory: ${{ inputs.WORKING_DIR }}
        env:
          TF_VAR_do_token: ${{ secrets.TF_VAR_DO_TOKEN }}
          OS_AUTH_URL: https://auth.cloud.ovh.net/v3
          OS_IDENTITY_API_VERSION: 3
          OS_PROJECT_DOMAIN_NAME: Default
          OS_USER_DOMAIN_NAME: Default
          OVH_ENDPOINT: ovh-ca
          OS_TENANT_ID: ${{ secrets.OS_TENANT_ID }}
          OS_TENANT_NAME: ${{ secrets.OS_TENANT_NAME }}
          OS_USERNAME: ${{ secrets.OS_USERNAME }}
          OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
          OVH_APPLICATION_KEY: ${{ secrets.OVH_APPLICATION_KEY }}
          OVH_APPLICATION_SECRET: ${{ secrets.OVH_APPLICATION_SECRET }}
          OVH_CONSUMER_KEY: ${{ secrets.OVH_CONSUMER_KEY }}
          OVH_CLOUD_PROJECT_SERVICE: ${{ secrets.OVH_CLOUD_PROJECT_SERVICE }}

      - name: Load plan file
        id: read
        uses: juliangruber/read-file-action@v1
        with:
          path: ${{ inputs.WORKING_DIR }}/plan.txt

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLANPRINT: "terraform\n${{ steps.read.outputs.content }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### Refers to \`${{ inputs.WORKING_DIR }}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLANPRINT}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          app_id: ${{ secrets.GH_APPROVAL_APP_ID }}
          private_key: ${{ secrets.GH_APPROVAL_APP_PKEY }}

      - name: Wait for approval
        uses: trstringer/manual-approval@v1
        timeout-minutes: 60
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          secret: ${{ steps.generate_token.outputs.token }}
          approvers: ${{ inputs.APPROVERS }}
          minimum-approvals: 1
          issue-title: "Terragrunt approval pending for ${{ inputs.WORKING_DIR }}"

      - name: Terragrunt apply-all
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terragrunt apply-all --terragrunt-non-interactive
        working-directory: ${{ inputs.WORKING_DIR }}
        env:
          TF_VAR_do_token: ${{ secrets.TF_VAR_DO_TOKEN }}
          OS_AUTH_URL: https://auth.cloud.ovh.net/v3
          OS_IDENTITY_API_VERSION: 3
          OS_PROJECT_DOMAIN_NAME: Default
          OS_USER_DOMAIN_NAME: Default
          OVH_ENDPOINT: ovh-ca
          OS_TENANT_ID: ${{ secrets.OS_TENANT_ID }}
          OS_TENANT_NAME: ${{ secrets.OS_TENANT_NAME }}
          OS_USERNAME: ${{ secrets.OS_USERNAME }}
          OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
          OVH_APPLICATION_KEY: ${{ secrets.OVH_APPLICATION_KEY }}
          OVH_APPLICATION_SECRET: ${{ secrets.OVH_APPLICATION_SECRET }}
          OVH_CONSUMER_KEY: ${{ secrets.OVH_CONSUMER_KEY }}
          OVH_CLOUD_PROJECT_SERVICE: ${{ secrets.OVH_CLOUD_PROJECT_SERVICE }}
