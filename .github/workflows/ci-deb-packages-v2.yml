name: Build Deb Packages

# Controls when the workflow will run
on:

  workflow_call:
    inputs:
      ENVIRONMENT:
        required: false
        type: string
      RUNNER:
        required: false
        default: ubuntu-latest
        type: string
      PROJECT_NAME:
        required: true
        type: string
      BASE_BRANCH:
        required: false
        type: string
        default: 'master'
        description: Default base branch to create a PR.
      BASE_IMAGE:
        required: true
        description: Base image without tag used to build
        type: string
      DISTRO_CODENAME:
        required: true
        description: Base image tag used to build
        type: string
      PLATFORM:
        required: false
        description: Default OS/Arch
        default: linux/amd64
        type: string
    # outputs:
    #   ARTIFACT_NAME:
    #     value: deb-${{env.IMAGE_TAG}}-${{env.PLATFORM}}-artifact

jobs:
  build:

    runs-on: ${{ inputs.RUNNER }}
    name: Build
    environment: ${{ inputs.ENVIRONMENT }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: General debs based on ${{ inputs.BASE_IMAGE }}:${{ inputs.DISTRO_CODENAME }} for ${{ inputs.PLATFORM }}
      shell: sh
      run: |
        mkdir -v -p /tmp/$GITHUB_RUN_ID/

        cat << EOF | tee /tmp/$GITHUB_RUN_ID/run.sh
        #!/bin/bash

        set -o pipefail

        # eval inside builder image
        version=\$(dpkg-parsechangelog --show-field Version | cut -f1 -d"-")
        if [ $? -ne 0 ]; then
          exit 1
        fi

        lsb=\$(lsb_release -cs)
        if [ $? -ne 0 ]; then
          exit 1
        fi

        # eval inside runner
        hash=$(echo $GITHUB_SHA | cut -c1-10)

        # deb package version
        dch_version=\${version}-${GITHUB_RUN_ID}~\${hash}~\${lsb}
        echo "dch_version: \${dch_version}"

        dch -b -M -v "\${dch_version}" --force-distribution -D "\${lsb}" "Nightly build, \${hash}"
        if [ $? -ne 0 ]; then
          exit 1
        fi

        debuild -b -us -uc && mv -v ../*.deb .
        EOF

        chmod -v +x /tmp/$GITHUB_RUN_ID/run.sh
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: build debs
      run: docker run --platform linux/${{ inputs.PLATFORM }} --rm --entrypoint="/usr/local/bin/run.sh" -w /root -v $(pwd):/root -v /tmp/${GITHUB_RUN_ID}/run.sh:/usr/local/bin/run.sh ${{ inputs.BASE_IMAGE }}:${{ inputs.DISTRO_CODENAME }}

    - name: Set custom variables
      shell: sh
      run: |
        echo "IMAGE_TAG=${{ inputs.DISTRO_CODENAME }}-${{ inputs.PLATFORM }}" >> $GITHUB_ENV

    - name: Copy git hash
      shell: sh
      env:
        GITHUB_SHA: ${{ github.sha }}
      run: |
        echo $GITHUB_SHA > hash.txt

    - name: Compress files
      shell: sh
      run: |
        tar -czvf ${{ env.IMAGE_TAG }}.tar.gz $(ls -1 | grep '.deb\|hash.txt')

    - name: Generate SHA checksum
      shell: sh
      run: |
        sha512sum ${{ env.IMAGE_TAG }}.tar.gz > ${{ env.IMAGE_TAG }}.sha1
      
    - uses: actions/upload-artifact@v4
      with:
        name: deb-${{ env.IMAGE_TAG }}-artifact
        path: |
          *.tar.gz
          *.sha1
        if-no-files-found: error

    - uses: actions/upload-artifact@v4
      with:
        name: deb-${{ env.IMAGE_TAG }}-changelog-artifact
        path: |
          ./debian/changelog
        if-no-files-found: error
