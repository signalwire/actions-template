# This is a basic workflow to help you get started with Actions

name: Docker Build, Scan & Push

# Controls when the workflow will run
on:

  workflow_call:
    inputs:
      PROJECT_NAME:
        required: true
        type: string
      PUSH:
        required: false
        type: string
        default: false
      FILE:
        required: false
        type: string
        default: ./Dockerfile
      CONTEXT:
        required: false
        type: string
        default: .
      PLATFORMS:
        required: false
        type: string
        default: linux/amd64
      ENABLE_GPG:
        required: false
        type: boolean
        default: false
      GPG_FILE:
        required: false
        type: string
        default: tls.zip.asc
      SUBMODULES_RECURSIVE:
        required: false
        type: boolean
        default: false
      TAG:
        required: false
        type: string
        default: |
          type=schedule
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
      BUILD_ARGS:
        required: false
        type: string
        default: ''
      SUBMODULES_PRIVATE: 
        required: false
        type: boolean
        default: true
      REGISTRY:
        type: string
        required: false
        default: registry.hub.docker.com
      TOKEN_FORMAT:
        type: string
        default: id_token
        description: 'The default token format generated when authenticating.'
      IMAGE_REPO:
        type: string
        required: false
        default: 'signalwire'
        description: 'The default registry repo owner.'
      CONTAINER_SCAN:
        type: boolean
        default: true
        description: 'Whenever Trivy scan should run.'
      CONTAINER_TEST:
        type: boolean
        default: true
        description: 'Whenever the container should be tested on pr.'
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false
      GPG_PASSPHRASE:
        required: false
      GH_BOT_DEPLOY_KEY:
        required: false
      GCP_SA:
        required: false
      GCP_WIP:
        required: false


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest-16-cores
    name: BUILD
    permissions:
      id-token: write
      contents: read
    outputs:
      IMAGE_TAG: ${{ steps.build.outputs.IMAGE_TAG }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/checkout@v3
      name: Checkout private submoules recursively
      id: private
      if: ${{ inputs.SUBMODULES_RECURSIVE  == true && inputs.SUBMODULES_PRIVATE == true }}
      with:
        ssh-key: ${{ secrets.GH_BOT_DEPLOY_KEY }}
        submodules: 'recursive'


    - uses: actions/checkout@v3
      name: Checkout public submoules recursively
      id: public
      if: ${{ inputs.SUBMODULES_RECURSIVE  == true && inputs.SUBMODULES_PRIVATE == false }}
      with:
        submodules: 'recursive'
    
    - run: git submodule status > REVISION
      if: ${{ inputs.SUBMODULES_RECURSIVE  == true }}

    - name: Checkout actions
      uses: actions/checkout@v3
      with:
        repository: signalwire/actions-template
        ref: feat_improvecaching
        path: actions
        
    - uses: ./actions/.github/actions/gpg
      name: Enable GPG
      if: ${{ inputs.ENABLE_GPG  == true }}
      with:
        FILE: ${{ inputs.GPG_FILE }}
      env:
        PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    # Remove unitil use it
    # - uses: ./actions/.github/actions/gcloud-auth
    #   if: contains(${{inputs.REGISTRY}}, 'pkg.dev' )
    #   id: gcloud_auth
    #   name: 'Authenticate to Google Cloud'
    #   with:
    #     AUDIENCE: ${{ inputs.AUDIENCE }}
    #     TOKEN_FORMAT: ${{ inputs.TOKEN_FORMAT }}
    #   env:
    #     GCP_WIP: ${{ secrets.GCP_WIP }}
    #     GCP_SA: ${{ secrets.GCP_SA }}

    - uses: ./actions/.github/actions/docker
      name: Docker build
      id: build
      with:
        PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
        PUSH: ${{ inputs.PUSH }}
        FILE: ${{ inputs.FILE }}
        CONTEXT: ${{ inputs.CONTEXT }}
        PLATFORMS: ${{ inputs.PLATFORMS }}
        TAG: ${{ inputs.TAG }}
        REGISTRY: ${{ inputs.REGISTRY }}
        IMAGE_REPO: ${{ inputs.IMAGE_REPO }}
        CONTAINER_TEST: ${{ inputs.CONTAINER_TEST }}
        BUILD_ARGS: ${{ inputs.BUILD_ARGS }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        # GCLOUD_ACCESS_TOKEN: ${{ steps.gcloud_auth.outputs.GCLOUD_TOKEN }}    
    
    - uses: ./actions/.github/actions/trivy
      name: Trivy Scan
      if: github.event_name == 'pull_request' && inputs.CONTAINER_SCAN == true
      with:
        IMAGE: ${{ steps.build.outputs.IMAGE_TAG }}
      env:
        PAT: ${{ secrets.CI_PAT }}

    - name: Create Issue on container scan
      # if: ${{ failure() }}
      uses: dacbd/create-issue-action@v1
      with:
        token: ${{ secrets.PAT_CI }}
        title: Vulnerability Detected
        repo: signalwire/cloud-product
        body: |
          ### Context
          [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
          Workflow name - `${{ github.workflow }}`
          Job -           `${{ github.job }}`
          status -        `${{ job.status }}`
          # Vulnerabilities - `${{ steps.read.outputs.content }}`
        assignees: ${{ github.actor }}

    - name: Create Issue From File
      uses: peter-evans/create-issue-from-file@v4
      with:
        title: An example issue
        content-filepath: ./container_scan.txt
        repository: signalwire/cloud-product
        token: ${{ secrets.PAT_CI }}
        labels: security,vulnerability
        
