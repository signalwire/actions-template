name: Build and Distribute (via Docker)

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: false
        type: string
        description: Environment where the variables and secrets are scoped to
      RUNNER:
        required: false
        default: ubuntu-latest
        description: A GitHub runner type
        type: string
      REPO_DOMAIN:
        required: false
        description: Domain name of repository
        type: string
      PLATFORM:
        required: true
        description: Default Linux Arch (amd64/arm32v7/...)
        type: string
      DOCKERFILE:
        required: true
        description: Path to Dockerfile
        type: string
      MAINTAINER:
        required: true
        description: Package maintainer
        type: string
      ARTIFACTS_PATTERN:
        required: false
        default: '.*\.(deb|rpm)$'
        description: Regexp that matches artifacts
        type: string
      TARGET_ARTIFACT_NAME:
        required: true
        description: Artifact name
        type: string
      UPLOAD_BUILD_ARTIFACTS:
        required: false
        type: boolean
        default: true
        description: Enable upload build artifacts related steps
      CLEAN_BUILD_ARTIFACTS:
        required: false
        type: boolean
        default: true
        description: Remove build artifacts after publish
      CREATE_DESTINATION_FOLDERS:
        required: false
        type: boolean
        default: true
        description: Create folder on destination
      BUILD_ARTIFACT_RETENTION_DAYS:
        required: false
        type: number
        default: 1
        description: Number of days to keep build artifacts
      LOG_RETENTION_DAYS:
        required: false
        type: number
        default: 7
        description: Number of days to keep build log artifacts
      META_FILE_PATH_PREFIX:
        required: true
        type: string
        default: ''
        description: A prefix to append to meta file (also target folder where the files should be sent on remote)
      META_REPO:
        required: true
        type: string
        default: ''
        description: Target meta repo to sync metadata changes
      META_REPO_BRANCH:
        required: true
        type: string
        default: ''
        description: Target meta repo branch name
      META_REPO_DEFAULT_BRANCH:
        required: false
        type: string
        default: 'main'
        description: Target meta repo default branch name

    secrets:
      HOSTNAME:
        required: true
      PROXY_URL:
        required: true
      TELEPORT_TOKEN:
        required: true
      USERNAME:
        required: true
      REPO_PASSWORD:
        required: false
      REPO_USERNAME:
        required: false
      GH_BOT_DEPLOY_TOKEN:
        required: true

jobs:
  build:
    runs-on: ${{ inputs.RUNNER }}
    permissions: {}
    environment: ${{ inputs.ENVIRONMENT }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: code

      - name: Set up QEMU for Docker
        uses: docker/setup-qemu-action@v3

      - name: Build Docker image
        shell: bash
        working-directory: code
        run: |
          env REPO_PASSWORD='${{ secrets.REPO_PASSWORD }}' docker build \
            --build-arg BUILD_NUMBER="${GITHUB_RUN_ID}" \
            --build-arg GIT_SHA="$(echo ${GITHUB_SHA} | cut -c1-10)" \
            --build-arg MAINTAINER="${{ inputs.MAINTAINER }}" \
            --build-arg REPO_DOMAIN="${{ inputs.REPO_DOMAIN }}" \
            --build-arg REPO_USERNAME="${{ secrets.REPO_USERNAME }}" \
            --file "${{ inputs.DOCKERFILE }}" \
            --no-cache \
            --platform linux/${{ inputs.PLATFORM }} \
            --progress=plain \
            --secret id=REPO_PASSWORD,env=REPO_PASSWORD \
            --tag artifacts-${GITHUB_RUN_ID}:${GITHUB_SHA} \
            --ulimit nofile=1024000:1024000 \
          . 2>&1 | tee artifacts-${GITHUB_RUN_ID}-${GITHUB_SHA}.log

      - name: Extract artifacts from image
        shell: bash
        working-directory: code
        run: |
          set -euo pipefail

          export ARTIFACTS_DIR="./out"
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" | tee -a "${GITHUB_ENV}"

          export TEMP_DIR=$(mktemp -d)

          # dump Docker image blobs
          docker save artifacts-${GITHUB_RUN_ID}:${GITHUB_SHA} --output "${TEMP_DIR}/artifacts-${GITHUB_RUN_ID}-${GITHUB_SHA}.tar" && \
          tar -xf "${TEMP_DIR}/artifacts-${GITHUB_RUN_ID}-${GITHUB_SHA}.tar" -C "${TEMP_DIR}" && \
          rm -f "${TEMP_DIR}/artifacts-${GITHUB_RUN_ID}-${GITHUB_SHA}.tar"

          # extract blobs content
          mkdir -p "${ARTIFACTS_DIR}" && find "${TEMP_DIR}/" -type f -exec file {} + \
          | grep -E ":.*tar archive" \
          | cut -d: -f1 \
          | xargs -rI{} tar --keep-newer-files -xf {} -C "${ARTIFACTS_DIR}"

          # cleanup
          docker image rm artifacts-${GITHUB_RUN_ID}:${GITHUB_SHA} && \
          rm -rf "${TEMP_DIR}"

          if [ "$(find "${ARTIFACTS_DIR}" -type f | wc -l)" -lt 1 ]; then
              echo "No files found in ${ARTIFACTS_DIR}."
              exit 1
          fi

      - name: Filter artifacts by pattern
        shell: bash
        working-directory: code
        run: |
          set -euo pipefail

          export TEMP_DIR=$(mktemp -d)

          find "${ARTIFACTS_DIR}" \
            -type f \
            -regextype posix-extended \
            -regex "${{ inputs.ARTIFACTS_PATTERN || env.ARTIFACTS_PATTERN }}" \
            -exec sh -c 'mv -vf "$1" "${TEMP_DIR}/$(basename "$1")"' _ {} \; && \
          rm -rvf "${ARTIFACTS_DIR}" && \
          mv -v "${TEMP_DIR}" "${ARTIFACTS_DIR}"

          if [ "$(find "${ARTIFACTS_DIR}" -type f | wc -l)" -lt 1 ]; then
              echo "No files found in ${ARTIFACTS_DIR}."
              exit 1
          fi

          printf ${GITHUB_SHA} | tee "${ARTIFACTS_DIR}/hash.txt"

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.TARGET_ARTIFACT_NAME }}.log
          path: code/artifacts-*.log
          if-no-files-found: warn
          retention-days: ${{ inputs.LOG_RETENTION_DAYS }}

      - name: Compress build artifacts
        if: ${{ inputs.UPLOAD_BUILD_ARTIFACTS }}
        shell: bash
        working-directory: code
        run: |
          tar -czvf ${{ inputs.TARGET_ARTIFACT_NAME }}.tar.gz -C "${ARTIFACTS_DIR}" $(ls -1 "${ARTIFACTS_DIR}")
          sha512sum ${{ inputs.TARGET_ARTIFACT_NAME }}.tar.gz | tee ${{ inputs.TARGET_ARTIFACT_NAME }}.tar.gz.sha512

      - name: Upload build artifacts
        if: ${{ inputs.UPLOAD_BUILD_ARTIFACTS }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.TARGET_ARTIFACT_NAME }}
          path: |
            code/*.tar.gz
            code/*.sha512
          if-no-files-found: error
          retention-days: ${{ inputs.BUILD_ARTIFACT_RETENTION_DAYS }}

  distribute:
    runs-on: ${{ inputs.RUNNER }}
    if: (github.ref_type == 'branch' && github.base_ref == '' && inputs.UPLOAD_BUILD_ARTIFACTS)
    needs: build
    permissions:
      id-token: write
      contents: read
    environment: ${{ inputs.ENVIRONMENT }}
    steps:

      - name: Checkout reusable actions
        uses: actions/checkout@v4
        with:
          repository: signalwire/actions-template
          ref: main
          fetch-depth: 1
          path: actions
          sparse-checkout: |
            .github/actions/teleport/action.yml
          sparse-checkout-cone-mode: false

      - name: Create destination folder on remote host
        if: ${{ inputs.CREATE_DESTINATION_FOLDERS }}
        uses: ./actions/.github/actions/teleport
        with:
          EXEC_COMMANDS: mkdir -p ${{ inputs.META_FILE_PATH_PREFIX }}
        env:
          HOSTNAME: ${{ secrets.HOSTNAME }}
          PROXY_URL: ${{ secrets.PROXY_URL }}
          TOKEN: ${{ secrets.TELEPORT_TOKEN }}
          USERNAME: ${{ secrets.USERNAME }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.TARGET_ARTIFACT_NAME }}

      - name: Copy build artifacts to remote host
        uses: ./actions/.github/actions/teleport
        with:
          FILES: '*.tar.gz'
          EXEC_COMMANDS: 'echo "${{ github.sha }}" > ${{ inputs.META_FILE_PATH_PREFIX }}/hash.txt'
          FILES_FOLDER: ${{ inputs.META_FILE_PATH_PREFIX }}
        env:
          HOSTNAME: ${{ secrets.HOSTNAME }}
          PROXY_URL: ${{ secrets.PROXY_URL }}
          TOKEN: ${{ secrets.TELEPORT_TOKEN }}
          USERNAME: ${{ secrets.USERNAME }}

      - name: Delete build artifact
        if: ${{ inputs.CLEAN_BUILD_ARTIFACTS }}
        uses: geekyeggo/delete-artifact@v5
        with:
          name: ${{ inputs.TARGET_ARTIFACT_NAME }}
          failOnError: false

  meta-repo:
    runs-on: ${{ inputs.RUNNER }}
    if: (github.ref_type == 'branch' && github.base_ref == '' && inputs.UPLOAD_BUILD_ARTIFACTS)
    needs:
      - build
      - distribute
    permissions:
      id-token: write
      contents: read
    environment: ${{ inputs.ENVIRONMENT }}
    steps:

      - name: Encode '${{ inputs.META_REPO_BRANCH }}' and write to ENV
        id: encode-meta-repo-branch
        shell: bash
        run: |
          echo "META_REPO_BRANCH_B64=$(echo -n ${{ inputs.META_REPO_BRANCH }} | base64)" | tee -a "${GITHUB_ENV}"
          echo "meta-repo-branch-b64=$(echo -n ${{ inputs.META_REPO_BRANCH }} | base64)" | tee -a "${GITHUB_OUTPUT}"

      - name: Checkout metadata repo (${{ inputs.META_REPO_BRANCH }})
        uses: actions/checkout@v4
        id: meta-branch-exists
        continue-on-error: true
        with:
          repository: ${{ inputs.META_REPO }}
          ref: ${{ inputs.META_REPO_BRANCH }}
          token: ${{ secrets.GH_BOT_DEPLOY_TOKEN || github.token }}
          fetch-depth: 1
          path: ${{ steps.encode-meta-repo-branch.outputs.meta-repo-branch-b64 }}

      - name: Checkout metadata repo (${{ inputs.META_REPO_BRANCH }})
        uses: actions/checkout@v4
        if: steps.meta-branch-exists.outcome != 'success'
        with:
          repository: ${{ inputs.META_REPO }}
          ref: ${{ inputs.META_REPO_DEFAULT_BRANCH }}
          token: ${{ secrets.GH_BOT_DEPLOY_TOKEN || github.token }}
          fetch-depth: 1
          path: ${{ steps.encode-meta-repo-branch.outputs.meta-repo-branch-b64 }}
          clean: true

      - name: Create remote branch (${{ inputs.META_REPO_BRANCH }})
        if: steps.meta-branch-exists.outcome != 'success'
        working-directory: ${{ steps.encode-meta-repo-branch.outputs.meta-repo-branch-b64 }}
        run: |
          git checkout -b ${{ inputs.META_REPO_BRANCH }}
          git push --set-upstream origin ${{ inputs.META_REPO_BRANCH }}

      - name: Push changes
        shell: bash
        working-directory: ${{ steps.encode-meta-repo-branch.outputs.meta-repo-branch-b64 }}
        run: |
          git config --global user.email "github-actions@github.com" && \
            git config --global user.name "github-actions"

          echo "${{ inputs.META_FILE_PATH_PREFIX }}" | tee metafile.txt

          git status --porcelain | grep -q . || exit 0

          git add -v metafile.txt && \
            git commit --branch -m "update metadata" && \
              git push --atomic -v
